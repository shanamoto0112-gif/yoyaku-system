****ここからyoyaku.html****
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>予約管理システム</title>
    
    <!-- Google Fontsから美しいフォントを読み込みます -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap" rel="stylesheet">

    <style>
        /* ============================== */
        /* 全体のスタイル */
        /* ============================== */
        body {
            margin: 0;
            font-family: 'Noto Sans JP', sans-serif; /* 美しい日本語フォントを指定 */
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f2f5; /* 少し青みがかった、洗練された背景色 */
        }

        /* ============================== */
        /* メインパネルのスタイル */
        /* ============================== */
        .main-panel {
            background-color: #ffffff;
            border-radius: 8px; /* 角を丸くする */
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); /* 影をつけて立体感を出す */
            width: 400px;
            max-width: 90%; /* スマホでも見やすいように */
            overflow: hidden; /* 角丸の外にはみ出さないように */
            text-align: center;
        }

        /* パネルのヘッダー部分 */
        .panel-header {
            background-color: #0056b3; /* 濃いブルーで引き締める */
            color: white;
            padding: 25px 20px;
        }
        .panel-header h1 {
            margin: 0;
            font-size: 1.8em;
        }

        /* パネルのメインコンテンツ部分 */
        .panel-body {
            padding: 40px 30px;
        }
        .panel-body p {
            margin-top: 0;
            margin-bottom: 30px;
            color: #555;
            font-size: 1.1em;
        }

        /* アクセスボタンのスタイル */
        .access-button {
            display: inline-block;
            background-color: #007bff;
            color: white;
            padding: 15px 30px;
            font-size: 1.1em;
            font-weight: bold;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s, transform 0.2s;
        }
        
        .access-button:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }
        
        /* パネルのフッター部分 */
        .panel-footer {
            background-color: #f7f7f7;
            padding: 15px;
            font-size: 0.8em;
            color: #888;
            border-top: 1px solid #e0e0e0;
        }
        
        /* システム情報 */
        .system-info {
            margin-top: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
            font-size: 0.9em;
            color: #666;
        }
    </style>
</head>
<body>

    <div class="main-panel">
        <div class="panel-header">
            <h1>予約管理システム</h1>
        </div>
        <div class="panel-body">
            <p>システムにアクセスしてください</p>
            <!-- 直接yoyaku.htmlへのリンク -->
            <a href="yoyaku.html" class="access-button">予約管理システムへ</a>
            
            <div class="system-info">
                <p><strong>機能：</strong><br>
                • 予約の作成・編集・削除<br>
                • 月表示・日表示の切り替え<br>
                • データの保存・復元</p>
            </div>
        </div>
        <div class="panel-footer">
            <p>&copy; 2025 Maruni Co.,Ltd</p>
        </div>
    </div>

</body>
</html>

****ここまでyoyaku.html****

****ここからdaisha_yoyaku.html****
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>代車予約管理</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 20px;
        padding-top: 75px;
        background-color: #f2f9f2; /* 薄い緑色 */
    }
    .date-navigator {
        position: fixed; top: 0; left: 0; width: 100%;
        background-color: #f2f9f2; /* 薄い緑色 */
        z-index: 100; padding: 10px 20px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-sizing: border-box;
    }
    .nav-group {
        display: flex;
        align-items: center;
        gap: 15px;
    }
    .nav-group.left {
        justify-content: flex-start;
    }
    .nav-group.center {
        justify-content: center;
    }
    .nav-group.right {
        justify-content: flex-end;
    }
    .nav-group.left, .nav-group.right {
        flex: 1;
    }
    .date-navigator h2 { min-width: 200px; text-align: center; cursor: pointer; margin: 0; }
    .date-navigator button { padding: 8px 15px; border: 1px solid #ccc; background-color: #fff; border-radius: 4px; cursor: pointer; }
    .date-navigator button:hover { background-color: #e9e9e9; }
    /* ↓ 新しい予約管理ボタンのデザイン */
    #yoyaku-kanri-button {
        display: inline-block;
        padding: 8px 15px;
        border: 1px solid #ccc;
        border-radius: 4px;
        cursor: pointer;
        text-decoration: none; /* リンクの下線を消す */
        background-color: #fff; /* 背景を白に */
        color: #dc3545; /* 文字を赤に (クリアボタンと同じ赤色です) */
        font-weight: bold;
    }
    #yoyaku-kanri-button:hover {
        background-color: #fdf5f5; /* マウスを乗せるとほんのりピンクに */
    }
    .date-navigator input[type="search"] {
        padding: 6px 10px;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 0.9em;
    }
    .data-controls {
        position: fixed; top: 10px; right: 20px; z-index: 101;
        display: flex; gap: 10px; align-items: center;
    }
    .data-controls button {
        padding: 5px 10px; font-size: 0.85em; border: 1px solid #ccc;
        background-color: #fff; border-radius: 4px; cursor: pointer;
    }
    .data-controls button:hover { background-color: #e9e9e9; }
    .today-button { background-color: #6c757d !important; color: white !important; }
    .today-button:hover { background-color: #5a6268 !important; }
    .backup-button { background-color: #28a745 !important; color: white !important; }
    .restore-button { background-color: #17a2b8 !important; color: white !important; }
    .clear-button { background-color: #dc3545 !important; color: white !important; }
    .hidden { display: none !important; }
           .scheduler-container {
        position: relative;
        /* ↓ 高さをより正確に計算し直しました */
        height: calc(100vh - 120px); /* 100%画面高 - 上75px - 下45px */
        margin-bottom: 0; /* 固定バーがあるので不要に */
        display: flex; flex-direction: column;
        border: 1px solid #ccc; background-color: #fff;
        width: fit-content; overflow-x: auto;
    }
    #current-time-line {
        position: absolute;
        top: 0;
        width: 2px;
        background-color: #dc3545;
        z-index: 35;
        pointer-events: none;
        display: none;
    }
    .time-header { display: flex; border-bottom: 1px solid #ccc; background-color: #e4f0e4; /* 少し濃い緑色 */ position: sticky; left: 0; z-index: 10; }
    .header-spacer { min-width: 140px; box-sizing: border-box; border-right: 1px solid #ccc; }
    .half-hour-label { min-width: 60px; text-align: left; padding: 5px 4px; font-size: 0.8em; font-weight: bold; box-sizing: border-box; border-right: 1px solid #ddd; }
        .scheduler-body {
        display: flex;
        flex-direction: column;
        flex-grow: 1; /* 残りの高さをすべて埋める */
        min-height: 0; /* flexアイテムの縮小時の崩れを防ぐ */
        overflow-y: auto; /* ★ここが重要！中身だけをY軸(縦)スクロールさせる */
    }
    /***** 修正点① *****/
    /* .lane の flex: 1 を削除し、yoyaku.html と同じ挙動（高さ固定）にしました */
    .lane { display: flex; border-bottom: 1px solid #eee; }
    .lane:last-child { border-bottom: none; }
    .lane-label { width: 140px; min-width: 140px; max-width: 140px; /* 横幅を完全に固定 */ padding: 10px; background-color: #f2f9f2; /* 薄い緑色 */ border-right: 1px solid #ccc; display: flex; align-items: center; justify-content: center; font-weight: bold; position: sticky; left: 0; z-index: 5; white-space: nowrap; /* 文字の折り返しを禁止 */ overflow: hidden; /* はみ出した部分を隠す */ text-overflow: ellipsis; /* はみ出す場合は...で表示 */ box-sizing: border-box; }
    .time-slots-wrapper { position: relative; display: flex; }
    .time-slot { min-width: 30px; height: 40px; box-sizing: border-box; }
    .solid-line { border-left: 2px solid #333; }
    .dashed-line { border-left: 1px dashed #aaa; }
    .dotted-line { border-left: 1px dotted #bbb; }
    .booking-block { cursor: grab; position: absolute; height: 100%; top: 0; border: 3px solid transparent; border-radius: 4px; box-sizing: border-box; z-index: 20; transition: opacity 0.3s ease; }
    .booking-block.filtered-out { opacity: 0.2; }
    .booking-block-content { display: flex; flex-direction: column; height: 100%; justify-content: center; padding-left: 5px; overflow: hidden; }
    .booking-block-line1 { font-weight: bold; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    .booking-block-line2 { font-size: 0.9em; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    .booking-block.selected { border-color: #0056b3; box-shadow: 0 0 10px rgba(0, 86, 179, 0.5); }
    .booking-block.dragging { opacity: 0.5; cursor: grabbing; }
    .booking-block.resizing { cursor: default; }
    .booking-block.starts-before { border-top-left-radius: 0; border-bottom-left-radius: 0; border-left: 2px dotted #555; }
    .booking-block.ends-after { border-top-right-radius: 0; border-bottom-right-radius: 0; border-right: 2px dotted #555; }
    .booking-block.lane-color-1 { background-color: #cce5ff; border-color: #b8daff; color: #004085; } /* 明るい青 */
    .booking-block.lane-color-2 { background-color: #c5b3e0; border-color: #b099d4; color: #381f5c; } /* 濃い紫 */
    .booking-block.lane-color-3 { background-color: #d4edda; border-color: #c3e6cb; color: #155724; } /* 明るい緑 */
    .booking-block.lane-color-4 { background-color: #a3d0ff; border-color: #7abaff; color: #00366f; } /* 濃い青 */
    .booking-block.lane-color-5 { background-color: #fff3cd; border-color: #ffeeba; color: #856404; } /* 明るい黄 */
    .booking-block.lane-color-6 { background-color: #b1dfbb; border-color: #99d6a8; color: #0e3b18; } /* 濃い緑 */
    .booking-block.lane-color-7 { background-color: #e2d9f3; border-color: #d0c0e8; color: #49287a; } /* 明るい紫 */
    .booking-block.lane-color-8 { background-color: #ffe69c; border-color: #ffd86b; color: #664d03; } /* 濃い黄 */
    .resize-handle { position: absolute; right: 0; top: 0; width: 8px; height: 100%; cursor: ew-resize; z-index: 30; }
    .resize-handle-left { position: absolute; left: 0; top: 0; width: 8px; height: 100%; cursor: ew-resize; z-index: 30; }
    .modal { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; }
    .modal-content { background-color: #fff; padding: 20px 30px; border: 1px solid #888; width: 600px; max-width: 90%; min-height: 400px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.2); position: relative; }
    .modal-close-button { color: #aaa; position: absolute; top: 10px; right: 20px; font-size: 28px; font-weight: bold; cursor: pointer; }
    #booking-form { display: flex; flex-direction: column; gap: 0; }
    .form-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; }
    .form-grid-3col { display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px; }
    #start-date-input, #end-date-input { background-color: #fff; cursor: pointer; padding: 8px; border: 1px solid #ccc; border-radius: 4px; font-size: 1em; }
    #booking-form label { font-weight: bold; }
    #booking-form input[type="text"], #booking-form select { padding: 8px; border: 1px solid #ccc; border-radius: 4px; font-size: 1em; }
    .radio-group { display: flex; align-items: center; gap: 10px; }
    .radio-group label { font-weight: normal; }
    .form-buttons { display: flex; justify-content: flex-end; gap: 10px; margin-top: 10px; }
    #info-box-wrapper { position: fixed; bottom: 0; left: 0; width: 100%; background-color: #f2f9f2; /* 薄い緑色 */ border-top: 2px solid #ccc; box-shadow: 0 -2px 5px rgba(0,0,0,0.1); z-index: 50; }
    /* 【↓ 新しいコードに書き換え】 */
.footer-content {
    display: flex;
    gap: 20px;
    padding: 15px 20px;
    box-sizing: border-box;
    flex-grow: 1; /* 残りの高さいっぱいに広がる */
    min-height: 0; /* flexの縮小時の崩れを防ぐ */
}
    #info-box { width: 400px; flex-shrink: 0; border: 1px solid #ddd; border-radius: 8px; padding: 15px; overflow-y: auto; }
    #info-box-placeholder p { color: #6c757d; margin: 0; }
    #info-box-details h2 { margin-top: 0; margin-bottom: 10px; border-bottom: 1px solid #eee; padding-bottom: 10px; font-size: 1.2em; }
    #info-box-details p { margin: 8px 0; }
    #info-box-close-button { float: right; font-size: 24px; font-weight: bold; color: #aaa; cursor: pointer; line-height: 1; }
    #info-box-close-button:hover { color: #333; }
    .info-box-actions { margin-top: 15px; padding-top: 15px; border-top: 1px solid #eee; text-align: left; }
    .danger-button { background-color: #dc3545; color: white; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer; }
    .danger-button:hover { background-color: #c82333; }
    .primary-button { background-color: #007bff; color: white; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer; margin-left: 10px; }
    .primary-button:hover { background-color: #0069d9; }
    #info-box-wrapper {
    transition: transform 0.4s ease-in-out, height 0.4s ease-in-out;
    height: 50vh; /* 開いた時の高さを画面の50%に */
    display: flex;
    flex-direction: column;
}
    /* 【↓ 1行追加】 */
#info-box-wrapper.is-collapsed {
    transform: translateY(calc(100% - 45px));
    height: 45px; /* 閉じた時の高さをヘッダー分に固定 */
}
    #info-box-header {
        background-color: #e4f0e4; /* 少し濃い緑色 */
        padding: 0 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
        border-bottom: 1px solid #ccc;
        height: 45px;
    }
    #info-box-title {
        margin: 0;
        font-size: 1.1em;
        font-weight: bold;
    }
    #info-box-toggle-button {
        background: #fff;
        border: 1px solid #ccc;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        font-size: 18px;
        line-height: 28px;
        cursor: pointer;
        font-weight: bold;
        transition: transform 0.3s;
        padding: 0;
    }
    #info-box-wrapper:not(.is-collapsed) #info-box-toggle-button {
        transform: rotate(180deg);
    }
    #daily-booking-list { flex-grow: 1; display: flex; flex-direction: column; min-width: 0; }
    #daily-booking-list h2 { margin: 0 0 10px 0; font-size: 1.2em; }
    .list-table-wrapper { flex-grow: 1; overflow-y: auto; border: 1px solid #ddd; border-radius: 4px; background-color: #fff; }
    #daily-booking-list table { width: 100%; border-collapse: collapse; font-size: 0.9em; }
    #daily-booking-list th, #daily-booking-list td { border-bottom: 1px solid #ddd; padding: 8px; text-align: left; white-space: nowrap; }
    #daily-booking-list thead th { background-color: #e4f0e4; /* 少し濃い緑色 */ position: sticky; top: 0; }
    #daily-list-body .no-booking-row td { text-align: center; color: #888; padding: 20px; }
    #calendar-container {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 8px;
        margin-bottom: 20px;
    }
    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    .calendar-header h2 {
        margin: 0;
    }
    .calendar-header button {
        padding: 5px 10px;
        border: 1px solid #ccc;
        background-color: #fff;
        border-radius: 4px;
        cursor: pointer;
    }
    .calendar-table {
        width: 100%;
        border-collapse: collapse;
        table-layout: fixed;
    }
    .calendar-table th, .calendar-table td {
        border: 1px solid #e0e0e0;
        padding: 8px;
        vertical-align: top;
        height: 120px;
    }
   .calendar-table th {
        background-color: #e4f0e4; /* 少し濃い緑色 */
        height: auto;
        text-align: center;
    }
    .calendar-day {
        font-weight: bold;
    }
    .day-saturday { color: #0056b3; }
    .day-sunday { color: #dc3545; }
    .other-month .calendar-day {
        color: #ccc;
    }
    .booking-count {
        margin-top: 8px;
        font-size: 0.9em;
        background-color: #e0f2e9;
        padding: 3px 5px;
        border-radius: 4px;
        display: inline-block;
    }
    .calendar-table td:hover {
        background-color: #e4f0e4; /* 少し濃い緑色 */
        cursor: pointer;
    }
    #info-box-details h2 .primary-button {
        float: right;
        margin-right: 15px;
        margin-left: 0;
        padding: 2px 10px;
        font-size: 0.85em;
        vertical-align: middle;
    }

    /* ========================================================================= */
    /* スマートフォン向けスタイル (768px以下で適用) */
    /* ========================================================================= */
     @media (max-width: 768px) {
        body {
            padding: 10px;
            padding-top: 120px; /* ヘッダーの高さ分を確保 */
        }
        .date-navigator {
            flex-direction: column; /* 縦並びにする */
            padding: 10px;
        }
        .nav-group {
            width: 100%;
            justify-content: space-between !important; /* 中央揃えを解除 */
            margin-bottom: 5px;
        }
        .date-navigator h2 {
            font-size: 1.2em;
        }
        .scheduler-container {
            margin-bottom: 45px !important; /* 下の閉じた情報欄の高さ分を確保 */
        }
        .footer-content {
            flex-direction: column; /* 縦並びにする */
            max-height: 50vh; /* 画面の半分の高さに制限 */
        }
        #info-box {
            width: 100%;
            box-sizing: border-box;
            margin-bottom: 10px;
        }
        .modal-content {
            width: 95%;
            padding: 15px;
        }
        .form-grid, .form-grid-3col {
            grid-template-columns: 1fr; /* 1列にする */
        }
        
        /* 横向きのスマホ用スタイル (高さが幅より小さい場合) */
        @media (orientation: landscape) {
            .footer-content {
                flex-direction: row !important; /* 横並びに戻す */
            }
            #info-box {
                width: 400px !important; /* PCと同じ幅に戻す */
            }
        }
    }
    #booking-form .form-grid, #booking-form .form-grid-3col {
        gap: 15px; /* 基本の間隔を15pxに戻します */
    }
    #booking-form > div { /* フォーム直下のdivの間隔 */
        margin-bottom: 10px;
    }
    #booking-form label {
        display: block; /* ラベルをブロック要素にして改行させます */
        margin-bottom: 5px;
    }
    #booking-form input[type="text"], #booking-form select {
        width: 100%; /* 入力欄の幅を親要素に合わせます */
        box-sizing: border-box; /* paddingを含めて幅100%になるようにします */
    }
    .user-car-grid {
        display: grid;
        grid-template-columns: auto 1fr auto auto; /* ラベル, ユーザー名入力, ラベル, 車番入力 */
        gap: 0 10px; /* 縦の隙間は0, 横の隙間は10px */
        align-items: center; /* 要素を上下中央に揃えます */
    }
    .user-car-grid label {
        display: inline; /* このグリッド内のラベルは横並びのためinlineに戻します */
        margin-bottom: 0;
    }
    .user-car-grid input {
        width: auto; /* このグリッド内の入力欄は自動幅にします */
    }
</style>
<!-- ★★★ 修正点③ 門番の設置 ★★★ -->
<!-- Netlifyのログアウトボタン用のスタイルと、認証スクリプトを追加しました -->
<style>
    [data-netlify-identity-menu] {
        margin-left: auto;
    }
    [data-netlify-identity-menu] .netlify-identity-button {
        background-color: #6c757d;
        color: white;
        border-radius: 4px;
        padding: 8px 15px;
        font-size: 1em;
        font-weight: normal;
    }
    [data-netlify-identity-menu] .netlify-identity-button:hover {
        background-color: #5a6268;
    }
</style>
</head>
<body>

    <div class="date-navigator">
        <div class="nav-group left">
            <!-- target="_blank" を削除し、同じタブで開くようにしました -->
            <a href="yoyaku.html" id="yoyaku-kanri-button">予約管理</a>
            <button id="view-toggle-button">月表示</button>
        </div>
        <div class="nav-group center">
            <button id="prev-day-button">&lt; PREV</button>
            <h2 id="current-date-display">2025年10月01日</h2>
            <button id="next-day-button">NEXT &gt;</button>
        </div>
        <!-- ★★★ 修正点③ 門番の設置 ★★★ -->
        <!-- ログアウトボタンの表示場所を確保しました -->
        <div class="nav-group right">
            <div data-netlify-identity-menu></div>
        </div>
    </div>

    <div class="data-controls">
        <button id="today-button" class="today-button">今日</button>
        <button id="backup-button" class="backup-button">データ保存</button>
        <button id="restore-button" class="restore-button">データ復元</button>
        <button id="clear-data-button" class="clear-button">データクリア</button>
        <input type="file" id="restore-file-input" class="hidden" accept=".json">
    </div>

    <div id="calendar-container" class="hidden"></div>

    <div id="main-scheduler-container" class="scheduler-container">
        <div class="time-header"></div>
        <div class="scheduler-body"></div>
        <div id="current-time-line"></div>
    </div>

    <div id="info-box-wrapper">
        <div id="info-box-header">
            <h2 id="info-box-title">本日の予約リスト / 詳細</h2>
            <button id="info-box-toggle-button">＾</button>
        </div>
        <div class="footer-content">
            <div id="info-box">
                <div id="info-box-placeholder">
                    <p>予約ブロックをクリックすると、ここに詳細が表示されます。</p>
                </div>
                                <div id="info-box-details" style="display: none;">
                    <h2>予約詳細<span id="info-box-close-button">&times;</span><button id="edit-booking-button" class="primary-button">編集</button></h2>
                    <p><strong>代車:</strong> <span id="info-lane-number"></span></p>
                    <p><strong>日時:</strong> <span id="info-datetime"></span></p>
                    <p><strong>ユーザー名:</strong> <span id="info-user-name"></span></p>
                    <div class="info-box-actions">
                        <button id="delete-booking-button" class="danger-button">この予約を削除</button>
                    </div>
                </div>
            </div>
            <div id="daily-booking-list">
                <h2>本日の予約リスト</h2>
                <div class="list-table-wrapper">
                    <table>
                        <thead>
                            <tr>
                                <th>代車</th>
                                <th>ユーザー名</th>
                                <th>予約時間</th>
                            </tr>
                        </thead>
                        <tbody id="daily-list-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div id="booking-modal" class="modal">
        <div class="modal-content">
            <span class="modal-close-button">&times;</span>
            <h2>代車予約入力</h2>
                        <form id="booking-form">
                <div class="form-grid">
                    <div>
                        <label for="lane-select">代車:</label>
                        <select id="lane-select"></select>
                    </div>
                    <div>
                        <label for="user-name">ユーザー名:</label>
                        <input type="text" id="user-name" list="user-name-list" required>
                    </div>
                </div>
                <div class="form-grid">
                    <div><label for="start-date-input">開始日時:</label><input type="text" id="start-date-input" placeholder="日付を選択..."></div>
                    <div><label for="end-date-input">終了日時:</label><input type="text" id="end-date-input" placeholder="日付を選択..."></div>
                </div>
                <datalist id="user-name-list"></datalist>
                <div class="form-buttons"><button type="submit">保存</button><button type="button" id="cancel-button">キャンセル</button></div>
            </form>
        </div>
    </div>

     <!-- ↓↓↓ ここから下に貼り付け ↓↓↓ -->
        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/ja.js"></script>
    
    <!-- Firebase App (コア) -->
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <!-- Firebase Firestore (データベース) -->
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js"></script>
    
    <script>
        // =======================================================================
        // 【最重要】↓ この下の「...」の部分だけを、あなたの情報に書き換えてください
        // =======================================================================
        const firebaseConfig = {
            apiKey: "AIzaSyDsgnJTAbc7FShXFXWBsR25IDXQox8sQjM",
            authDomain: "maruni-yoyaku-system.firebaseapp.com",
            projectId: "maruni-yoyaku-system",
            storageBucket: "maruni-yoyaku-system.firebasestorage.app",
            messagingSenderId: "419757490787",
            appId: "1:419757490787:web:095eb61e85d008ea2b2e56"
        };
        // =======================================================================
        // ↑ 書き換えるのはこの中だけです ↑
        // =======================================================================

        // Firebaseを初期化する
        firebase.initializeApp(firebaseConfig);
        // Firestoreデータベースへの参照を準備する
        const db = firebase.firestore();

        document.addEventListener('DOMContentLoaded', () => {
            // Netlify Identityのチェックを一時的に無効化
            const isEditor = true;

            // 1. 変数と定数の定義
            const carList = ["102", "9572", "1287", "1248", "9047", "サービス代車A", "サービス代車B", "サービス代車C"];
            const totalLanes = carList.length;
            const slotWidth = 30;
            const startHour = 8;
            const startMinute = 30;
            const endHour = 19;
            let currentDate = new Date();
            let allBookings = [];
            let startPicker, endPicker;
            let editingBookingId = null;
            let currentView = 'daily';

            // 2. Firebase(Firestore)機能
            function setupRealtimeListener() {
                db.collection('daisha_bookings').onSnapshot(snapshot => {
                    allBookings = snapshot.docs.map(doc => ({ ...doc.data(), id: doc.id, startDate: doc.data().startDate.toDate(), endDate: doc.data().endDate.toDate() }));
                    renderForDate(currentDate);
                    updateSuggestionLists();
                }, error => console.error("代車データの取得に失敗: ", error));
            }
            async function saveBooking(bookingData) {
                try {
                    const dataToSave = { ...bookingData, startDate: firebase.firestore.Timestamp.fromDate(bookingData.startDate), endDate: firebase.firestore.Timestamp.fromDate(bookingData.endDate) };
                    const docRef = dataToSave.id ? db.collection('daisha_bookings').doc(dataToSave.id) : db.collection('daisha_bookings').doc();
                    if (dataToSave.id) delete dataToSave.id;
                    await docRef.set(dataToSave, { merge: true });
                    return true;
                } catch (error) { console.error('代車予約の保存に失敗:', error); alert('代車予約の保存に失敗しました。'); return false; }
            }
            async function deleteBooking(bookingId) {
                try { await db.collection('daisha_bookings').doc(bookingId).delete(); return true; }
                catch (error) { console.error('代車予約の削除に失敗:', error); alert('代車予約の削除に失敗しました。'); return false; }
            }
            function clearAllData() { if (confirm('全ての代車予約データを削除しますか？')) { allBookings.forEach(b => deleteBooking(b.id)); } }

            // 3. HTML要素の取得
            const modal = document.getElementById('booking-modal'), bookingForm = document.getElementById('booking-form'), closeButton = document.querySelector('.modal-close-button'), cancelButton = document.getElementById('cancel-button'), infoBoxPlaceholder = document.getElementById('info-box-placeholder'), infoBoxDetails = document.getElementById('info-box-details'), infoBoxCloseButton = document.getElementById('info-box-close-button'), prevDayButton = document.getElementById('prev-day-button'), nextDayButton = document.getElementById('next-day-button'), currentDateDisplay = document.getElementById('current-date-display'), deleteBookingButton = document.getElementById('delete-booking-button'), editBookingButton = document.getElementById('edit-booking-button'), dailyListBody = document.getElementById('daily-list-body'), todayButton = document.getElementById('today-button'), backupButton = document.getElementById('backup-button'), restoreButton = document.getElementById('restore-button'), clearDataButton = document.getElementById('clear-data-button'), restoreFileInput = document.getElementById('restore-file-input'), viewToggleButton = document.getElementById('view-toggle-button'), calendarContainer = document.getElementById('calendar-container'), schedulerContainer = document.getElementById('main-scheduler-container'), currentTimeLine = document.getElementById('current-time-line');
            
            // 4. ヘルパー関数とUI構築関数
            function formatDate(d, f) { const y=d.getFullYear(), m=('0'+(d.getMonth()+1)).slice(-2), a=('0'+d.getDate()).slice(-2), h=('0'+d.getHours()).slice(-2), i=('0'+d.getMinutes()).slice(-2); return f.replace('YYYY',y).replace('MM',m).replace('DD',a).replace('HH',h).replace('mm',i); }
            function updateDateDisplay(d) { currentDateDisplay.textContent = formatDate(d, 'YYYY年MM月DD日'); }
            function openModal(slotInfo, bookingToEdit = null) {
                if (startPicker) startPicker.destroy(); if (endPicker) endPicker.destroy();
                if (bookingToEdit) {
                    editingBookingId = bookingToEdit.id;
                    document.getElementById('user-name').value = bookingToEdit.userName;
                    document.getElementById('lane-select').value = bookingToEdit.lane;
                    startPicker = flatpickr("#start-date-input", { locale: "ja", enableTime: true, time_24hr: true, minuteIncrement: 15, defaultDate: bookingToEdit.startDate });
                    endPicker = flatpickr("#end-date-input", { locale: "ja", enableTime: true, time_24hr: true, minuteIncrement: 15, defaultDate: bookingToEdit.endDate, minDate: bookingToEdit.startDate });
                } else {
                    editingBookingId = null; bookingForm.reset(); const iSD = new Date(currentDate); if (slotInfo) iSD.setHours(slotInfo.hour, slotInfo.minute, 0, 0); const iED = new Date(iSD.getTime() + 36e5); document.getElementById('lane-select').value = slotInfo.lane;
                    startPicker = flatpickr("#start-date-input", { locale: "ja", enableTime: true, time_24hr: true, minuteIncrement: 15, defaultDate: iSD });
                    endPicker = flatpickr("#end-date-input", { locale: "ja", enableTime: true, time_24hr: true, minuteIncrement: 15, defaultDate: iED, minDate: iSD });
                }
                modal.style.display = 'flex';
            }
            function closeModal() { if (startPicker) startPicker.destroy(); if (endPicker) endPicker.destroy(); editingBookingId = null; bookingForm.reset(); modal.style.display = 'none'; }
            function clearSelection() { const s = document.querySelector('.booking-block.selected'); if(s)s.classList.remove('selected'); infoBoxPlaceholder.style.display='block'; infoBoxDetails.style.display='none'; }
            function updateInfoBox(b) {
                clearSelection(); b.classList.add('selected'); const d = b.dataset, sD=new Date(d.startDate), eD=new Date(d.endDate), sT=formatDate(sD,'HH:mm'); let eT=formatDate(eD,'HH:mm'), dED=eD; if(eT==="00:00"&&sD<eD){eT="24:00";dED=new Date(eD-6e4);}
                document.getElementById('info-lane-number').textContent=carList[d.lane-1]; document.getElementById('info-datetime').textContent=`${formatDate(sD,'YYYY/MM/DD')} ${sT} ～ ${formatDate(dED,'YYYY/MM/DD')} ${eT}`; document.getElementById('info-user-name').textContent=d.userName;
                infoBoxPlaceholder.style.display='none'; document.getElementById('info-box-wrapper').classList.remove('is-collapsed'); infoBoxDetails.style.display='block';
            }
            function updateSuggestionLists() { const u = [...new Set(allBookings.map(b => b.userName).filter(Boolean))]; document.getElementById('user-name-list').innerHTML = u.map(n => `<option value="${n}"></option>`).join(''); }
            function buildSchedulerUI() {
                const h=schedulerContainer.querySelector('.time-header'), b=schedulerContainer.querySelector('.scheduler-body'); h.innerHTML='<div class="header-spacer"></div>'; b.innerHTML=''; const tM=(endHour-startHour)*60-startMinute; for(let i=0;i<=Math.ceil(tM/30);i++){const r=startHour+Math.floor((startMinute+i*30)/60),m=(startMinute+i*30)%60;h.innerHTML+=`<div class="half-hour-label">${('0'+r).slice(-2)}:${('0'+m).slice(-2)}</div>`;}
                for(let i=1;i<=totalLanes;i++){
                    const l=document.createElement('div');l.className='lane';l.innerHTML=`<div class="lane-label">${carList[i-1]}</div><div class="time-slots-wrapper" id="lane-wrapper-${i}"></div>`;const w=l.querySelector('.time-slots-wrapper');
                    w.addEventListener('dragover',e=>e.preventDefault());w.addEventListener('drop',e=>{e.preventDefault();const id=e.dataTransfer.getData('text/plain'),bo=allBookings.find(b=>b.id===id);if(!bo)return;const r=w.getBoundingClientRect(),x=e.clientX-r.left+w.scrollLeft,sI=Math.round(x/slotWidth),nS=new Date(new Date(currentDate).setHours(startHour,startMinute,0,0)+sI*9e5),nE=new Date(nS.getTime()+(bo.endDate-bo.startDate));const o=allBookings.some(b=>b.id!==id&&b.lane===i&&nS<b.endDate&&nE>b.startDate);if(o){alert('他の予約と重複します。');}else{bo.startDate=nS;bo.endDate=nE;bo.lane=i;saveBooking(bo);}});
                    for(let j=0;j<tM/15;j++){const s=document.createElement('div'),r=startHour+Math.floor((startMinute+j*15)/60),m=(startMinute+j*15)%60;s.className='time-slot';s.addEventListener('click',()=>{if(isEditor)openModal({lane:i,hour:r,minute:m});});if(m===0)s.classList.add('solid-line');else if(m===30)s.classList.add('dashed-line');else s.classList.add('dotted-line');w.appendChild(s);}b.appendChild(l);
                }
            }
            function renderDailySchedule(){schedulerContainer.querySelectorAll('.booking-block').forEach(b=>b.remove());dailyListBody.innerHTML='';const sD=new Date(currentDate).setHours(0,0,0,0),eD=new Date(currentDate).setHours(23,59,59,999);const bFD=allBookings.filter(b=>b.startDate<eD&&b.endDate>sD);bFD.sort((a,b)=>a.lane-b.lane||a.startDate-b.startDate).forEach(b=>{createBookingBlock(b);addBookingToList(b);});if(bFD.length===0)dailyListBody.innerHTML='<tr class="no-booking-row"><td colspan="3">本日の予約はありません。</td></tr>';clearSelection();}
            function createBookingBlock(b){const k=document.createElement('div');k.id=b.id;k.className=`booking-block lane-color-${b.lane%8+1}`;k.innerHTML=`<div class="booking-block-content"><div class="booking-block-line1">${b.userName||''}</div></div>`;Object.keys(b).forEach(y=>{if(typeof b[y]!=='object')k.dataset[y]=b[y]});k.dataset.startDate=b.startDate.toISOString();k.dataset.endDate=b.endDate.toISOString();const s=new Date(currentDate).setHours(startHour,startMinute,0,0),e=Math.max(b.startDate,s),d=Math.min(b.endDate,new Date(currentDate).setHours(endHour,0,0,0)),u=(d-e)/6e4;if(u>0){k.style.left=`${((e-s)/9e5)*slotWidth}px`;k.style.width=`${(u/15)*slotWidth}px`;}else{k.style.display='none';}if(b.startDate<s)k.classList.add('starts-before');if(b.endDate>new Date(currentDate).setHours(endHour,0,0,0))k.classList.add('ends-after');addInteractions(k);const w=document.getElementById(`lane-wrapper-${b.lane}`);if(w)w.appendChild(k);}
            function addInteractions(b){b.addEventListener('click',e=>{e.stopPropagation();if(e.currentTarget.classList.contains('selected')){clearSelection();}else{updateInfoBox(e.currentTarget);}});b.draggable=true;b.addEventListener('dragstart',e=>{if(e.target.classList.contains('resizing'))e.preventDefault();e.dataTransfer.setData('text/plain',e.target.id);});}
            function addBookingToList(b){const r=document.createElement('tr');r.innerHTML=`<td>${carList[b.lane-1]}</td><td>${b.userName}</td><td>${formatDate(b.startDate,'MM/DD HH:mm')}～${formatDate(b.endDate,'MM/DD HH:mm')}</td>`;dailyListBody.appendChild(r);}
            function renderForDate(d){currentDate=d;updateDateDisplay(d);renderDailySchedule();}
            function populateCarSelect(){document.getElementById('lane-select').innerHTML=carList.map((n,i)=>`<option value="${i+1}">${n}</option>`).join('');}

            // 5. イベントリスナー
            todayButton.addEventListener('click', () => renderForDate(new Date()));
            prevDayButton.addEventListener('click',()=>{currentDate.setDate(currentDate.getDate()-1);renderForDate(currentDate);});
            nextDayButton.addEventListener('click',()=>{currentDate.setDate(currentDate.getDate()+1);renderForDate(currentDate);});
            viewToggleButton.addEventListener('click',()=>alert('月表示は現在開発中です。'));
            closeButton.addEventListener('click',closeModal);cancelButton.addEventListener('click',closeModal);
            infoBoxCloseButton.addEventListener('click',clearSelection);
            document.getElementById('info-box-header').addEventListener('click', e => { if (!e.target.closest('#info-box-toggle-button')) document.getElementById('info-box-wrapper').classList.toggle('is-collapsed'); });
            document.getElementById('info-box-toggle-button').addEventListener('click', () => document.getElementById('info-box-wrapper').classList.toggle('is-collapsed'));
            
            bookingForm.addEventListener('submit', async (e) => {
                e.preventDefault();const sD=startPicker.selectedDates[0],eD=endPicker.selectedDates[0];if(!sD||!eD||eD<=sD){alert("日時を正しく選択してください。");return;}const tL=parseInt(document.getElementById('lane-select').value,10);const o=allBookings.some(b=>b.id!==editingBookingId&&b.lane===tL&&sD<b.endDate&&eD>b.startDate);if(o){alert("代車の予約が重複しています。");return;}
                const bD={id:editingBookingId,lane:tL,startDate:sD,endDate:eD,userName:document.getElementById('user-name').value};if(await saveBooking(bD))closeModal();
            });
            editBookingButton.addEventListener('click',()=>{const s=document.querySelector('.booking-block.selected');if(s){const b=allBookings.find(b=>b.id===s.id);if(b)openModal(null,b);}});
            deleteBookingButton.addEventListener('click',()=>{const s=document.querySelector('.booking-block.selected');if(s&&confirm("この予約を削除しますか？"))deleteBooking(s.id);});
            currentDateDisplay.addEventListener('click',()=>flatpickr(currentDateDisplay,{locale:"ja",defaultDate:currentDate,onClose:d=>{if(d[0])renderForDate(d[0]);}}).open());

            // 6. 初期化
            buildSchedulerUI(); populateCarSelect(); setupRealtimeListener();
            document.getElementById('info-box-wrapper').classList.add('is-collapsed');
            renderForDate(new Date());
        });
    </script>
</body>
</html>
****ここまでdaisha_yoyaku.html****